import os
import hashlib
import magic

# List of known malicious hashes (for demo purposes)
MALICIOUS_HASHES = [
    "e99a18c428cb38d5f260853678922e03",  # Example MD5 hash
    "d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2"  # Example SHA256 hash
]

# Suspicious strings to look for
SUSPICIOUS_KEYWORDS = ["keylogger", "backdoor", "trojan", "malware", "virus"]

def calculate_hash(file_path, hash_type="md5"):
    """Calculate the hash of a file (MD5/SHA256)."""
    hash_func = hashlib.md5() if hash_type == "md5" else hashlib.sha256()
    try:
        with open(file_path, "rb") as f:
            while chunk := f.read(8192):
                hash_func.update(chunk)
        return hash_func.hexdigest()
    except Exception as e:
        print(f"Error calculating hash: {e}")
        return None

def analyze_file(file_path):
    """Analyze the file for potential malware."""
    try:
        # File type detection
        file_type = magic.Magic(mime=True).from_file(file_path)
        print(f"File Type: {file_type}")
        
        # File size
        file_size = os.path.getsize(file_path)
        print(f"File Size: {file_size} bytes")
        
        # MD5 hash
        md5_hash = calculate_hash(file_path, "md5")
        print(f"MD5 Hash: {md5_hash}")
        
        # Check if hash matches known malware
        if md5_hash in MALICIOUS_HASHES:
            print("Alert: File hash matches a known malware sample!")
        
        # Suspicious strings
        print("\nScanning for suspicious strings...")
        with open(file_path, "r", errors="ignore") as f:
            content = f.read()
            for keyword in SUSPICIOUS_KEYWORDS:
                if keyword.lower() in content.lower():
                    print(f"Suspicious string found: {keyword}")

    except Exception as e:
        print(f"Error analyzing file: {e}")

# Main function
if __name__ == "__main__":
    file_path = input("Enter the path to the file for analysis: ")
    if os.path.exists(file_path):
        analyze_file(file_path)
    else:
        print("File does not exist. Please check the file path.")